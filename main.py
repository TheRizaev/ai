"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞ —Å RAG.
"""
import os
import sys
import logging
import argparse
from pathlib import Path
from typing import Optional

# Add project root to path
sys.path.append(str(Path(__file__).resolve().parent))

from config.settings import (
    YANDEX_API_KEY, OPENAI_API_KEY, 
    VOICE, VOICE_ROLE, VOICE_SPEED,
    LOG_LEVEL, LOG_FILE
)
from utils.logging_utils import setup_logging, ConversationLogger
from services.stt_service import STTService
from services.tts_service import TTSService
from services.llm_service import LangChainLLMService
from services.rag_service import RAGService
from services.medical_db_service import MedicalDBService
from services.appointment_service import AppointmentService
from agents.medical_agent import MedicalAgent
from utils.audio_utils import AudioPlayer

logger = logging.getLogger(__name__)

class MedicalVoiceAssistant:
    """–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG."""
    
    def __init__(self, agent_name: str = "–ú–∞—Ä–∏–Ω–∞", medical_center: str = "–¢–∞–±–ª–µ—Ç–∫–∞"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        
        Args:
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            medical_center: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
        """
        self.agent_name = agent_name
        self.medical_center = medical_center
        
        # –°–µ—Ä–≤–∏—Å—ã
        self.stt_service = None
        self.tts_service = None
        self.llm_service = None
        self.rag_service = None
        self.medical_db_service = None
        self.appointment_service = None
        
        # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–≥–µ–Ω—Ç
        self.medical_agent = None
        
        # –õ–æ–≥–≥–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversation_logger = None
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç '{agent_name}' –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ '{medical_center}'")
    
    def initialize_services(self, yandex_api_key: str, openai_api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
        
        Args:
            yandex_api_key: API –∫–ª—é—á Yandex SpeechKit
            openai_api_key: API –∫–ª—é—á OpenAI
        """
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # 1. –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (STT, TTS, LLM)
            print("  üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
            self.stt_service = STTService(api_key=yandex_api_key)
            
            print("  üîä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...")
            self.tts_service = TTSService(api_key=yandex_api_key)
            
            print("  üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
            self.llm_service = LangChainLLMService(api_key=openai_api_key)
            
            # 2. RAG —Å–µ—Ä–≤–∏—Å
            print("  üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (RAG)...")
            self.rag_service = RAGService(openai_api_key=openai_api_key)
            
            # 3. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            print("  üè• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self.medical_db_service = MedicalDBService()
            
            # 4. –°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
            print("  üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø–∏—Å–∏...")
            self.appointment_service = AppointmentService(self.medical_db_service)
            
            # 5. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–≥–µ–Ω—Ç
            print("  üë©‚Äç‚öïÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
            self.medical_agent = MedicalAgent(
                name=self.agent_name,
                medical_center_name=self.medical_center
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∫ –∞–≥–µ–Ω—Ç—É
            self.medical_agent.connect_services(
                stt_service=self.stt_service,
                tts_service=self.tts_service,
                llm_service=self.llm_service
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            self.medical_agent.register_services(
                rag_service=self.rag_service,
                medical_db_service=self.medical_db_service,
                appointment_service=self.appointment_service
            )
            
            # 6. –õ–æ–≥–≥–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            print("  üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤...")
            self.conversation_logger = ConversationLogger()
            
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            raise
    
    def listen_to_user(self) -> Optional[str]:
        """–°–ª—É—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            print("\nüé§ –°–ª—É—à–∞—é –≤–∞—Å... (–Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å)")
            
            def status_callback(event_type, data=None):
                if event_type == "start_listening":
                    print("üü¢ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")
                elif event_type == "partial" and data:
                    print(f"‚ö° {data}")
                elif event_type == "recognized" and data:
                    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {data}")
                elif event_type == "stop_listening":
                    print("üî¥ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                elif event_type == "error":
                    print(f"‚ùå –û—à–∏–±–∫–∞: {data}")
            
            user_input = self.stt_service.recognize_stream(callback=status_callback)
            
            if user_input and user_input.strip():
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.conversation_logger:
                    self.conversation_logger.log_user_input(user_input)
                
                return user_input.strip()
            else:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏")
            return None
    
    def generate_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
        try:
            print("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if self.conversation_logger:
                self.conversation_logger.log_system_event("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", user_message[:50])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response = self.medical_agent.generate_response(user_message)
            
            if response:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
                if self.conversation_logger:
                    self.conversation_logger.log_agent_response(response)
                
                return response
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    
    def speak_response(self, message: str):
        """–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç."""
        try:
            print(f"\nüí¨ {self.agent_name}: {message}")
            print("üîä –ü—Ä–æ–∏–∑–Ω–æ—à—É –æ—Ç–≤–µ—Ç...")
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            audio = self.tts_service.synthesize(
                text=message,
                voice=VOICE,
                role=VOICE_ROLE,
                speed=VOICE_SPEED
            )
            
            if audio:
                AudioPlayer.play_audio_segment(audio)
                print("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
    
    def start_medical_conversation(self):
        """–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."""
        try:
            print("\n" + "="*60)
            print(f"üè• –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –¶–ï–ù–¢–† '{self.medical_center.upper()}'")
            print(f"üë©‚Äç‚öïÔ∏è –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫: {self.agent_name}")
            print("="*60)
            
            print("\nüåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:")
            print("   üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É")
            print("   üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥")
            print("   ‚ÑπÔ∏è  –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞—Ö")
            print("   ‚è∞ –£–∑–Ω–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
            print("   ü©∫ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
            
            print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –Ø –ù–ï –∑–∞–º–µ–Ω—è—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞!")
            print("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º
            welcome_message = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä {self.medical_center}! "
                             f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {self.agent_name}. –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º "
                             f"–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            
            self.speak_response(welcome_message)
            
            conversation_count = 0
            
            while True:
                print(f"\n" + "-"*40 + f" –î–∏–∞–ª–æ–≥ {conversation_count + 1} " + "-"*40)
                
                # 1. –°–ª—É—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_message = self.listen_to_user()
                
                if not user_message:
                    print("ü§∑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if any(word in user_message.lower() for word in 
                       ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø—Ä–æ—â–∞–π', '–≤—ã—Ö–æ–¥', '—Ö–≤–∞—Ç–∏—Ç', '—Å—Ç–æ–ø', '—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å']):
                    farewell = f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–µ—Ä–µ–≥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä {self.medical_center}, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
                    self.speak_response(farewell)
                    break
                
                # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = self.generate_response(user_message)
                
                # 3. –ü—Ä–æ–∏–∑–Ω–æ—Å–∏–º –æ—Ç–≤–µ—Ç
                self.speak_response(response)
                
                conversation_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
                if conversation_count >= 20:
                    reminder = ("–ú—ã —É–∂–µ –¥–æ–ª–≥–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, "
                               "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ë–µ—Ä–µ–≥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ!")
                    self.speak_response(reminder)
                    break
                
        except KeyboardInterrupt:
            print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            farewell = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã!"
            self.speak_response(farewell)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
            print(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def run_text_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –≥–æ–ª–æ—Å–∞)."""
        try:
            print("\n" + "="*60)
            print(f"üè• –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –¶–ï–ù–¢–† '{self.medical_center.upper()}' - –¢–ï–ö–°–¢–û–í–´–ô –†–ï–ñ–ò–ú")
            print(f"üë©‚Äç‚öïÔ∏è –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫: {self.agent_name}")
            print("="*60)
            
            print(f"\nüëã –ü—Ä–∏–≤–µ—Ç! –Ø {self.agent_name} –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ {self.medical_center}.")
            print("–ü–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
            
            conversation_count = 0
            
            while True:
                print(f"\n[{conversation_count + 1}] –í–∞—à –≤–æ–ø—Ä–æ—Å: ", end="")
                user_input = input().strip()
                
                if not user_input:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if any(word in user_input.lower() for word in 
                       ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–≤—ã—Ö–æ–¥', 'quit', '—Å—Ç–æ–ø']):
                    print(f"\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–µ—Ä–µ–≥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ!")
                    break
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                response = self.generate_response(user_input)
                print(f"\nüè• {self.agent_name}: {response}")
                
                conversation_count += 1
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
        try:
            print("\n" + "="*50)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–î–ò–¶–ò–ù–°–ö–û–ì–û –¶–ï–ù–¢–†–ê")
            print("="*50)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.medical_db_service:
                db_stats = self.medical_db_service.get_statistics()
                print(f"üë• –í—Å–µ–≥–æ –≤—Ä–∞—á–µ–π: {db_stats.get('total_doctors', 0)}")
                print(f"üè• –í—Å–µ–≥–æ —É—Å–ª—É–≥: {db_stats.get('total_services', 0)}")
                print(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {db_stats.get('active_appointments', 0)}")
                print(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {db_stats.get('cancelled_appointments', 0)}")
                
                specialties = db_stats.get('doctors_by_specialty', {})
                if specialties:
                    print("\nüë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:")
                    for specialty, count in specialties.items():
                        print(f"  ‚Ä¢ {specialty}: {count} –≤—Ä–∞—á(–µ–π)")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG
            if self.rag_service:
                rag_stats = self.rag_service.get_knowledge_stats()
                print(f"\nüìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {rag_stats.get('files_in_directory', 0)} —Ñ–∞–π–ª–æ–≤")
                print(f"üîó –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if rag_stats.get('vectorstore_initialized') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}")
            
            print("\n" + "="*50)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        try:
            print("\nüîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            if self.stt_service:
                self.stt_service.close()
            
            if self.tts_service:
                self.tts_service.close()
            
            if self.rag_service:
                self.rag_service.close()
            
            if self.medical_db_service:
                self.medical_db_service.close()
            
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")


def setup_parser():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π AI –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                          # –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
  python main.py --text-mode              # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  python main.py --stats                  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  python main.py --name "–ê–Ω–Ω–∞"            # –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∞–≥–µ–Ω—Ç–∞
        """
    )
    
    parser.add_argument(
        '--yandex-api-key',
        help='Yandex SpeechKit API key'
    )
    parser.add_argument(
        '--openai-api-key',
        help='OpenAI API key'
    )
    parser.add_argument(
        '--name',
        default='–ú–∞—Ä–∏–Ω–∞',
        help='–ò–º—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú–∞—Ä–∏–Ω–∞)'
    )
    parser.add_argument(
        '--medical-center',
        default='–¢–∞–±–ª–µ—Ç–∫–∞',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¢–∞–±–ª–µ—Ç–∫–∞)'
    )
    parser.add_argument(
        '--text-mode',
        action='store_true',
        help='–ó–∞–ø—É—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –≥–æ–ª–æ—Å–∞)'
    )
    parser.add_argument(
        '--stats',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–π—Ç–∏'
    )
    parser.add_argument(
        '--log-level',
        default=LOG_LEVEL,
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
        help=f'–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {LOG_LEVEL})'
    )
    
    return parser


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser = setup_parser()
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(args.log_level, LOG_FILE)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞ —Å RAG")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    yandex_api_key = args.yandex_api_key or YANDEX_API_KEY or os.getenv('YANDEX_API_KEY')
    openai_api_key = args.openai_api_key or OPENAI_API_KEY or os.getenv('OPENAI_API_KEY')
    
    if not yandex_api_key and not args.text_mode:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω Yandex API –∫–ª—é—á (–Ω—É–∂–µ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --text-mode –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≥–æ–ª–æ—Å–∞")
        return 1
        
    if not openai_api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω OpenAI API –∫–ª—é—á")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        return 1
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = MedicalVoiceAssistant(
            agent_name=args.name,
            medical_center=args.medical_center
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        assistant.initialize_services(
            yandex_api_key=yandex_api_key or "",
            openai_api_key=openai_api_key
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        if args.stats:
            assistant.show_statistics()
            return 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
        if args.text_mode:
            print("üìù –ó–∞–ø—É—Å–∫ –≤ –¢–ï–ö–°–¢–û–í–û–ú —Ä–µ–∂–∏–º–µ")
            assistant.run_text_mode()
        else:
            print("üé§ –ó–∞–ø—É—Å–∫ –≤ –ì–û–õ–û–°–û–í–û–ú —Ä–µ–∂–∏–º–µ")
            assistant.start_medical_conversation()
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        try:
            if 'assistant' in locals():
                assistant.close()
        except:
            pass
            
    logger.info("üëã –†–∞–±–æ—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


if __name__ == "__main__":
    sys.exit(main())