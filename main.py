"""
–ù–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Å–ª–æ–∂–Ω—ã–π main.py
"""
import os
import sys
import time
import logging
import argparse
from pathlib import Path
from typing import Optional
# Add project root to path
sys.path.append(str(Path(__file__).resolve().parent))

from config.settings import (
    YANDEX_API_KEY, OPENAI_API_KEY, 
    VOICE, VOICE_ROLE, VOICE_SPEED,
    LOG_LEVEL, LOG_FILE
)
from utils.logging_utils import setup_logging
from services.stt_service import STTService
from services.tts_service import TTSService
from services.llm_service import LangChainLLMService
from utils.audio_utils import AudioPlayer

logger = logging.getLogger(__name__)

class SimpleVoiceAgent:
    """–ü—Ä–æ—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LangChain."""
    
    def __init__(self, name="–ú–∞—Ä–∏–Ω–∞"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞."""
        self.name = name
        self.conversation_history = []
        self.max_history = 6  # –ü–æ–º–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞—Ä—ã —Ä–µ–ø–ª–∏–∫
        self.current_chain = None  # –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
        
        # –°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        self.stt_service = None
        self.tts_service = None 
        self.llm_service = None
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç '{name}' —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LangChain")
    
    def connect_services(self, stt_service, tts_service, llm_service):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self.stt_service = stt_service
        self.tts_service = tts_service
        self.llm_service = llm_service
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self._setup_demo_chains()
        
        logger.info("–°–µ—Ä–≤–∏—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∞–≥–µ–Ω—Ç—É")
    
    def _setup_demo_chains(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫."""
        if not self.llm_service:
            return
            
        try:
            # 1. –¶–µ–ø–æ—á–∫–∞ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏ —é–º–æ—Ä–∞
            humor_prompt = """–¢—ã {agent_name} - –≤–µ—Å–µ–ª–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ —é–º–æ—Ä.
            –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –∞–Ω–µ–∫–¥–æ—Ç—ã, —à—É—Ç–∏.
            –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ - –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã."""
            
            self.llm_service.create_custom_chain(
                chain_name="humor",
                system_prompt=humor_prompt,
                temperature=0.9,
                max_tokens=120
            )
            
            # 2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –æ –ø–æ–≥–æ–¥–µ
            self.llm_service.add_constraint_chain(
                chain_name="weather_only",
                allowed_topics=["–ø–æ–≥–æ–¥–∞", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Å–æ–ª–Ω—Ü–µ", "–æ–±–ª–∞–∫–∞"],
                forbidden_topics=["–ø–æ–ª–∏—Ç–∏–∫–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã"]
            )
            
            # 3. –°–µ—Ä—å–µ–∑–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            business_prompt = """–¢—ã {agent_name} - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
            –ì–æ–≤–æ—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ —à—É—Ç–æ–∫.
            –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
            –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
            
            self.llm_service.create_custom_chain(
                chain_name="business",
                system_prompt=business_prompt,
                temperature=0.3,
                max_tokens=100
            )
            
            logger.info("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ø–æ—á–µ–∫: {e}")
    
    def switch_chain(self, chain_name: Optional[str] = None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–ø–æ—á–∫–∞–º–∏."""
        available_chains = ["default", "humor", "weather_only", "business"]
        
        if chain_name and chain_name in available_chains:
            self.current_chain = chain_name if chain_name != "default" else None
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ü–µ–ø–æ—á–∫—É: {chain_name}")
            return f"–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º '{chain_name}'. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É!"
        else:
            chains_info = ", ".join(available_chains)
            return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {chains_info}. –°–∫–∞–∂–∏—Ç–µ '—Ä–µ–∂–∏–º [–Ω–∞–∑–≤–∞–Ω–∏–µ]' –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è."
    
    def handle_chain_commands(self, user_message: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤."""
        user_lower = user_message.lower()
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        if "—Ä–µ–∂–∏–º" in user_lower or "–ø–µ—Ä–µ–∫–ª—é—á" in user_lower:
            if "—é–º–æ—Ä" in user_lower or "–∞–Ω–µ–∫–¥–æ—Ç" in user_lower or "humor" in user_lower:
                return self.switch_chain("humor")
            elif "–ø–æ–≥–æ–¥–∞" in user_lower or "weather" in user_lower:
                return self.switch_chain("weather_only")
            elif "–¥–µ–ª–æ–≤–æ–π" in user_lower or "–±–∏–∑–Ω–µ—Å" in user_lower or "business" in user_lower:
                return self.switch_chain("business")
            elif "–æ–±—ã—á–Ω—ã–π" in user_lower or "default" in user_lower or "—Å—Ç–∞–Ω–¥–∞—Ä—Ç" in user_lower:
                return self.switch_chain("default")
            else:
                return self.switch_chain(None)  # –ü–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if "–∫–∞–∫–æ–π —Ä–µ–∂–∏–º" in user_lower or "—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º" in user_lower:
            current = self.current_chain or "default"
            return f"–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º: {current}"
        
        return None
    
    def add_to_history(self, role, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        self.conversation_history.append({"role": role, "content": message})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > self.max_history:
            self.conversation_history = self.conversation_history[-self.max_history:]
    
    def listen(self):
        """–°–ª—É—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not self.stt_service:
            logger.error("STT —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return None
            
        print("üé§ –°–ª—É—à–∞—é... (–Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å)")
        
        try:
            # –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            def status_callback(event_type, data=None):
                if event_type == "start_listening":
                    print("üü¢ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")
                elif event_type == "partial" and data:
                    print(f"‚ö° {data}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                elif event_type == "recognized" and data:
                    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {data}")
                elif event_type == "stop_listening":
                    print("üî¥ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                elif event_type == "error":
                    print(f"‚ùå –û—à–∏–±–∫–∞: {data}")
            
            recognized_text = self.stt_service.recognize_stream(callback=status_callback)
            
            if recognized_text and recognized_text.strip():
                return recognized_text.strip()
            else:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏")
            return None
    
    def think(self, user_message):
        """–û–±–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç."""
        if not self.llm_service:
            logger.error("LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –º—ã—à–ª–µ–Ω–∏–µ–º."
        
        print("ü§î –î—É–º–∞—é...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        chain_response = self.handle_chain_commands(user_message)
        if chain_response:
            return chain_response
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_to_history("user", user_message)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain —Å–µ—Ä–≤–∏—Å —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–ø–æ—á–∫–æ–π
            if self.current_chain:
                print(f"üîó –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∂–∏–º: {self.current_chain}")
                response = self.llm_service.generate_response(
                    user_input=user_message,
                    agent_name=self.name,
                    chain_name=self.current_chain
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ü–µ–ø–æ—á–∫—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                response = self.llm_service.generate_with_history(
                    user_input=user_message,
                    conversation_history=self.conversation_history[:-1],
                    agent_name=self.name
                )
            
            if response:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_to_history("assistant", response)
                return response
            else:
                return "–•–º, —á—Ç–æ-—Ç–æ —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ —Å –º–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –Ω–µ —Ç–∞–∫."
    
    def speak(self, message):
        """–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç."""
        if not self.tts_service:
            logger.error("TTS —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print(f"üí¨ {self.name}: {message}")
            return
        
        print(f"üí¨ {self.name}: {message}")
        print("üîä –ì–æ–≤–æ—Ä—é...")
        
        try:
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            audio = self.tts_service.synthesize(
                text=message,
                voice=VOICE,
                role=VOICE_ROLE, 
                speed=VOICE_SPEED
            )
            
            if audio:
                AudioPlayer.play_audio_segment(audio)
                print("‚úÖ –°–∫–∞–∑–∞–ª–∞")
            else:
                print("‚ùå –ù–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏")
    
    def start_conversation(self):
        """–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."""
        print(f"\nüéâ –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {self.name}!")
        print("üó£Ô∏è  –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º. –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
        print("üîó –ù–æ–≤–∏–Ω–∫–∞: –¢–µ–ø–µ—Ä—å —è —É–º–µ—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º—ã!")
        print("   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ '—Ä–µ–∂–∏–º —é–º–æ—Ä' - –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
        print("   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ '—Ä–µ–∂–∏–º –ø–æ–≥–æ–¥–∞' - —Ç–æ–ª—å–∫–æ –æ –ø–æ–≥–æ–¥–µ")  
        print("   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ '—Ä–µ–∂–∏–º –¥–µ–ª–æ–≤–æ–π' - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç–µ–º")
        print("   ‚Ä¢ –°–∫–∞–∂–∏—Ç–µ '—Ä–µ–∂–∏–º –æ–±—ã—á–Ω—ã–π' - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        print("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º
        welcome_message = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {self.name}. –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å '—Ä–µ–∂–∏–º —é–º–æ—Ä' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º!"
        self.speak(welcome_message)
        
        conversation_count = 0
        
        try:
            while True:
                print(f"\n--- –†–µ–ø–ª–∏–∫–∞ {conversation_count + 1} ---")
                
                # 1. –°–ª—É—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_message = self.listen()
                
                if not user_message:
                    print("ü§∑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if any(word in user_message.lower() for word in 
                       ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø—Ä–æ—â–∞–π', '–≤—ã—Ö–æ–¥', '—Ö–≤–∞—Ç–∏—Ç', '—Å—Ç–æ–ø']):
                    farewell = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!"
                    self.speak(farewell)
                    break
                
                # 2. –î—É–º–∞–µ–º –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º
                response = self.think(user_message)
                
                # 3. –û—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º
                self.speak(response)
                
                conversation_count += 1
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ—â–∞–Ω–∏–µ...")
            farewell = "–ü–æ–∫–∞! –£–¥–∞—á–∏!"
            self.speak(farewell)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ: {e}")
            print(f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")


def setup_parser():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description='–ü—Ä–æ—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç')
    
    parser.add_argument(
        '--yandex-api-key', 
        help='Yandex SpeechKit API key'
    )
    parser.add_argument(
        '--openai-api-key', 
        help='OpenAI API key'
    )
    parser.add_argument(
        '--name',
        default='–ú–∞—Ä–∏–Ω–∞',
        help='–ò–º—è –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú–∞—Ä–∏–Ω–∞)'
    )
    parser.add_argument(
        '--log-level', 
        default=LOG_LEVEL,
        help=f'–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {LOG_LEVEL})'
    )
    
    return parser


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser = setup_parser()
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(args.log_level, LOG_FILE)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    yandex_api_key = args.yandex_api_key or YANDEX_API_KEY or os.getenv('YANDEX_API_KEY')
    openai_api_key = args.openai_api_key or OPENAI_API_KEY or os.getenv('OPENAI_API_KEY')
    
    if not yandex_api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω Yandex API –∫–ª—é—á")
        return 1
        
    if not openai_api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω OpenAI API –∫–ª—é—á")
        return 1
    
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        stt_service = STTService(api_key=yandex_api_key)
        tts_service = TTSService(api_key=yandex_api_key)
        llm_service = LangChainLLMService(api_key=openai_api_key)
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = SimpleVoiceAgent(name=args.name)
        agent.connect_services(stt_service, tts_service, llm_service)
        
        print("‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        agent.start_conversation()
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        try:
            if 'stt_service' in locals():
                stt_service.close()
            if 'tts_service' in locals():
                tts_service.close()
        except:
            pass
            
    logger.info("üëã –†–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


if __name__ == "__main__":
    sys.exit(main())